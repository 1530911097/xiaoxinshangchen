{"remainingRequest":"C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\src\\store\\index.js","dependencies":[{"path":"C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\src\\store\\index.js","mtime":1614500738692},{"path":"C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613721357303},{"path":"C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\node_modules\\babel-loader\\lib\\index.js","mtime":1613721456817}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport getters from \"./getters.js\";\nVue.use(Vuex);\nvar store = new Vuex.Store({\n  state: {\n    cartList: [] //创建一个数组，为了能把数据更好的存放进去\n\n  },\n  //储存管理的变量。主要是数据相关的\n  mutations: {\n    addCounter: function addCounter(state, payload) {\n      payload.count++;\n    },\n    addToCart: function addToCart(state, payload) {\n      payload.checked = true;\n      state.cartList.push(payload);\n    }\n  },\n  actions: {\n    //因为调用一次只请求一次数据，所以应该去判断\n    addCart: function addCart(context, payload) {\n      /* state.cartList.push(payload)  添加数据*/\n      var oldProduct = context.state.cartList.find(function (item) {\n        return item.iid === payload.iid;\n      }); //查询之前的数组是否有改商品\n      //般判断oldProduct\n\n      if (oldProduct) {\n        context.commit('addCounter', oldProduct);\n      } else {\n        payload.count = 1;\n        context.commit('addToCart', payload);\n      }\n      /* this.state.cartList.push(payload) */\n\n    }\n  },\n  //修改状态，并是同步的，在组件中使用.$store.commit('',)  \n  getters: getters\n  /* getters() {\r\n  \n  }, */\n  //对数据获取之前的再次编译,只要是去计算state的计算属性,$ store.getters.fun()\n\n  /* actions() {\r\n  \n  }, */\n  //异步操作，在组件中使用是&store.dispath\n\n  /* modules() {\r\n  \n  } */\n  //store的子模块,为了开发大型项目方便状态管理而使用的.\n\n});\nexport default store;",{"version":3,"sources":["C:\\Users\\Administrator\\Documents\\HBuilderProjects\\supermall1\\src\\store\\index.js"],"names":["Vue","Vuex","getters","use","store","Store","state","cartList","mutations","addCounter","payload","count","addToCart","checked","push","actions","addCart","context","oldProduct","find","item","iid","commit"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP;AACAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,IAAIG,KAAK,GAAG,IAAIH,IAAI,CAACI,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACNC,IAAAA,QAAQ,EAAE,EADJ,CACO;;AADP,GADmB;AAGvB;AAEHC,EAAAA,SAAS,EAAC;AACTC,IAAAA,UADS,sBACEH,KADF,EACQI,OADR,EACgB;AACxBA,MAAAA,OAAO,CAACC,KAAR;AACA,KAHQ;AAITC,IAAAA,SAJS,qBAICN,KAJD,EAIOI,OAJP,EAIe;AACvBA,MAAAA,OAAO,CAACG,OAAR,GAAgB,IAAhB;AACAP,MAAAA,KAAK,CAACC,QAAN,CAAeO,IAAf,CAAoBJ,OAApB;AACA;AAPQ,GALgB;AAc1BK,EAAAA,OAAO,EAAE;AAAE;AACVC,IAAAA,OADQ,mBACAC,OADA,EACSP,OADT,EACkB;AACzB;AACA,UAAIQ,UAAU,GAAGD,OAAO,CAACX,KAAR,CAAcC,QAAd,CAAuBY,IAAvB,CAA4B,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,GAAL,KAAaX,OAAO,CAACW,GAAzB;AAAA,OAAhC,CAAjB,CAFyB,CAGzB;AACA;;AACA,UAAIH,UAAJ,EAAgB;AACfD,QAAAA,OAAO,CAACK,MAAR,CAAe,YAAf,EAA4BJ,UAA5B;AACA,OAFD,MAEO;AACNR,QAAAA,OAAO,CAACC,KAAR,GAAgB,CAAhB;AACAM,QAAAA,OAAO,CAACK,MAAR,CAAe,WAAf,EAA4BZ,OAA5B;AACA;AACD;;AAEA;AAdO,GAdiB;AA6BvB;AACAR,EAAAA,OAAO,EAAPA;AAKH;;;AAEM;;AACN;;;AAEM;;AACN;;;AAEK;;AA3CqB,CAAf,CAAZ;AA6CA,eAAeE,KAAf","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport getters from './getters.js'\r\nVue.use(Vuex)\r\n\r\nvar store = new Vuex.Store({\r\n\tstate: {\r\n\t\tcartList: [] //创建一个数组，为了能把数据更好的存放进去\r\n\t}, //储存管理的变量。主要是数据相关的\r\n\t\r\n\tmutations:{\r\n\t\taddCounter(state,payload){\r\n\t\t\tpayload.count++\r\n\t\t},\r\n\t\taddToCart(state,payload){\r\n\t\t\tpayload.checked=true\r\n\t\t\tstate.cartList.push(payload)\r\n\t\t}\r\n\t},\r\n\tactions: { //因为调用一次只请求一次数据，所以应该去判断\r\n\t\taddCart(context, payload) {\r\n\t\t\t/* state.cartList.push(payload)  添加数据*/\r\n\t\t\tlet oldProduct = context.state.cartList.find(item => item.iid === payload.iid)\r\n\t\t\t//查询之前的数组是否有改商品\r\n\t\t\t//般判断oldProduct\r\n\t\t\tif (oldProduct) {\r\n\t\t\t\tcontext.commit('addCounter',oldProduct)\r\n\t\t\t} else {\r\n\t\t\t\tpayload.count = 1\r\n\t\t\t\tcontext.commit('addToCart', payload)\r\n\t\t\t}\r\n\t\t\t/* this.state.cartList.push(payload) */\r\n\r\n\t\t}\r\n\t}, //修改状态，并是同步的，在组件中使用.$store.commit('',)  \r\n    getters,\r\n   \r\n\r\n\r\n\r\n\t/* getters() {\r\n\r\n\t}, */ //对数据获取之前的再次编译,只要是去计算state的计算属性,$ store.getters.fun()\r\n\t/* actions() {\r\n\r\n\t}, */ //异步操作，在组件中使用是&store.dispath\r\n\t/* modules() {\r\n\r\n\t} */ //store的子模块,为了开发大型项目方便状态管理而使用的.\r\n})\r\nexport default store\n"]}]}