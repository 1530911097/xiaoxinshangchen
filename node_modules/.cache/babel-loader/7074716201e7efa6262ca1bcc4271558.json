{"remainingRequest":"E:\\HBuilderProjects\\supermall1\\node_modules\\babel-loader\\lib\\index.js!E:\\HBuilderProjects\\supermall1\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HBuilderProjects\\supermall1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HBuilderProjects\\supermall1\\src\\components\\common\\swiper\\Swiper.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HBuilderProjects\\supermall1\\src\\components\\common\\swiper\\Swiper.vue","mtime":1616157260262},{"path":"E:\\HBuilderProjects\\supermall1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613721357303},{"path":"E:\\HBuilderProjects\\supermall1\\node_modules\\babel-loader\\lib\\index.js","mtime":1613721456817},{"path":"E:\\HBuilderProjects\\supermall1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613721357303},{"path":"E:\\HBuilderProjects\\supermall1\\node_modules\\vue-loader\\lib\\index.js","mtime":1613721440296}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Swiper\",\n  props: {\n    interval: {\n      type: Number,\n      default: 3000\n    },\n    animDuration: {\n      type: Number,\n      default: 300\n    },\n    moveRatio: {\n      type: Number,\n      default: 0.25\n    },\n    showIndicator: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      slideCount: 0,\n      // 元素个数\n      totalWidth: 0,\n      // swiper的宽度\n      swiperStyle: {},\n      // swiper样式\n      currentIndex: 1,\n      // 当前的index\n      scrolling: false // 是否正在滚动\n\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 1.操作DOM, 在前后添加Slide\n    setTimeout(function () {\n      _this.handleDom(); // 2.开启定时器\n\n\n      _this.startTimer();\n    }, 1000);\n  },\n  methods: {\n    /**\n     * 定时器操作\n     */\n    startTimer: function startTimer() {\n      var _this2 = this;\n\n      this.playTimer = window.setInterval(function () {\n        _this2.currentIndex++;\n\n        _this2.scrollContent(-_this2.currentIndex * _this2.totalWidth);\n      }, this.interval);\n    },\n    stopTimer: function stopTimer() {\n      window.clearInterval(this.playTimer);\n    },\n\n    /**\n     * 滚动到正确的位置\n     */\n    scrollContent: function scrollContent(currentPosition) {\n      // 0.设置正在滚动\n      this.scrolling = true; // 1.开始滚动动画\n\n      this.swiperStyle.transition = 'transform ' + this.animDuration + 'ms';\n      this.setTransform(currentPosition); // 2.判断滚动到的位置\n\n      this.checkPosition(); // 4.滚动完成\n\n      this.scrolling = false;\n    },\n\n    /**\n     * 校验正确的位置\n     */\n    checkPosition: function checkPosition() {\n      var _this3 = this;\n\n      window.setTimeout(function () {\n        // 1.校验正确的位置\n        _this3.swiperStyle.transition = '0ms';\n\n        if (_this3.currentIndex >= _this3.slideCount + 1) {\n          _this3.currentIndex = 1;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } else if (_this3.currentIndex <= 0) {\n          _this3.currentIndex = _this3.slideCount;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } // 2.结束移动后的回调\n\n\n        _this3.$emit('transitionEnd', _this3.currentIndex - 1);\n      }, this.animDuration);\n    },\n\n    /**\n     * 设置滚动的位置\n     */\n    setTransform: function setTransform(position) {\n      this.swiperStyle.transform = \"translate3d(\".concat(position, \"px, 0, 0)\");\n      this.swiperStyle['-webkit-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n      this.swiperStyle['-ms-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n    },\n\n    /**\n     * 操作DOM, 在DOM前后添加Slide\n     */\n    handleDom: function handleDom() {\n      // 1.获取要操作的元素\n      var swiperEl = document.querySelector('.swiper');\n      var slidesEls = swiperEl.getElementsByClassName('slide'); // 2.保存个数\n\n      this.slideCount = slidesEls.length; // 3.如果大于1个, 那么在前后分别添加一个slide\n\n      if (this.slideCount > 1) {\n        var cloneFirst = slidesEls[0].cloneNode(true);\n        var cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\n        swiperEl.insertBefore(cloneLast, slidesEls[0]);\n        swiperEl.appendChild(cloneFirst);\n        this.totalWidth = swiperEl.offsetWidth;\n        this.swiperStyle = swiperEl.style;\n      } // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\n\n\n      this.setTransform(-this.totalWidth);\n    },\n\n    /**\n     * 拖动事件的处理\n     */\n    touchStart: function touchStart(e) {\n      // 1.如果正在滚动, 不可以拖动\n      if (this.scrolling) return; // 2.停止定时器\n\n      this.stopTimer(); // 3.保存开始滚动的位置\n\n      this.startX = e.touches[0].pageX;\n    },\n    touchMove: function touchMove(e) {\n      // 1.计算出用户拖动的距离\n      this.currentX = e.touches[0].pageX;\n      this.distance = this.currentX - this.startX;\n      var currentPosition = -this.currentIndex * this.totalWidth;\n      var moveDistance = this.distance + currentPosition; // 2.设置当前的位置\n\n      this.setTransform(moveDistance);\n    },\n    touchEnd: function touchEnd(e) {\n      // 1.获取移动的距离\n      var currentMove = Math.abs(this.distance); // 2.判断最终的距离\n\n      if (this.distance === 0) {\n        return;\n      } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 右边移动超过0.5\n        this.currentIndex--;\n      } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 向左移动超过0.5\n        this.currentIndex++;\n      } // 3.移动到正确的位置\n\n\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 4.移动完成后重新开启定时器\n\n      this.startTimer();\n    },\n\n    /**\n     * 控制上一个, 下一个\n     */\n    previous: function previous() {\n      this.changeItem(-1);\n    },\n    next: function next() {\n      this.changeItem(1);\n    },\n    changeItem: function changeItem(num) {\n      // 1.移除定时器\n      this.stopTimer(); // 2.修改index和位置\n\n      this.currentIndex += num;\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 3.添加定时器\n\n      this.startTimer();\n    }\n  }\n};",{"version":3,"sources":["Swiper.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<div id=\"swiper\">\r\n\t\t<div class=\"swiper\" @touchstart=\"touchStart\" @touchmove=\"touchMove\" @touchend=\"touchEnd\">\r\n\t\t\t<slot name=\"swiper\"></slot>\r\n\t\t</div>\r\n\t\t<slot name=\"indicator\">\r\n\t\t</slot>\r\n\t\t<div class=\"indicator\">\r\n\t\t\t<slot name=\"indicator\" v-if=\"showIndicator && slideCount>1\">\r\n\t\t\t\t<div v-for=\"(item, index) in slideCount\" class=\"indi-item\" :class=\"{active: index === currentIndex-1}\"\r\n\t\t\t\t\t:key=\"index\"></div>\r\n\t\t\t</slot>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\texport default {\r\n\t\tname: \"Swiper\",\r\n\t\tprops: {\r\n\t\t\tinterval: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: 3000\r\n\t\t\t},\r\n\t\t\tanimDuration: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: 300\r\n\t\t\t},\r\n\t\t\tmoveRatio: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: 0.25\r\n\t\t\t},\r\n\t\t\tshowIndicator: {\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\tdefault: true\r\n\t\t\t}\r\n\t\t},\r\n\t\tdata: function() {\r\n\t\t\treturn {\r\n\t\t\t\tslideCount: 0, // 元素个数\r\n\t\t\t\ttotalWidth: 0, // swiper的宽度\r\n\t\t\t\tswiperStyle: {}, // swiper样式\r\n\t\t\t\tcurrentIndex: 1, // 当前的index\r\n\t\t\t\tscrolling: false, // 是否正在滚动\r\n\t\t\t}\r\n\t\t},\r\n\t\tmounted: function() {\r\n\t\t\t// 1.操作DOM, 在前后添加Slide\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.handleDom();\r\n\r\n\t\t\t\t// 2.开启定时器\r\n\t\t\t\tthis.startTimer();\r\n\t\t\t}, 1000)\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t/**\r\n\t\t\t * 定时器操作\r\n\t\t\t */\r\n\t\t\tstartTimer: function() {\r\n\t\t\t\tthis.playTimer = window.setInterval(() => {\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\tthis.scrollContent(-this.currentIndex * this.totalWidth);\r\n\t\t\t\t}, this.interval)\r\n\t\t\t},\r\n\t\t\tstopTimer: function() {\r\n\t\t\t\twindow.clearInterval(this.playTimer);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 滚动到正确的位置\r\n\t\t\t */\r\n\t\t\tscrollContent: function(currentPosition) {\r\n\t\t\t\t// 0.设置正在滚动\r\n\t\t\t\tthis.scrolling = true;\r\n\r\n\t\t\t\t// 1.开始滚动动画\r\n\t\t\t\tthis.swiperStyle.transition = 'transform ' + this.animDuration + 'ms';\r\n\t\t\t\tthis.setTransform(currentPosition);\r\n\r\n\t\t\t\t// 2.判断滚动到的位置\r\n\t\t\t\tthis.checkPosition();\r\n\r\n\t\t\t\t// 4.滚动完成\r\n\t\t\t\tthis.scrolling = false\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 校验正确的位置\r\n\t\t\t */\r\n\t\t\tcheckPosition: function() {\r\n\t\t\t\twindow.setTimeout(() => {\r\n\t\t\t\t\t// 1.校验正确的位置\r\n\t\t\t\t\tthis.swiperStyle.transition = '0ms';\r\n\t\t\t\t\tif (this.currentIndex >= this.slideCount + 1) {\r\n\t\t\t\t\t\tthis.currentIndex = 1;\r\n\t\t\t\t\t\tthis.setTransform(-this.currentIndex * this.totalWidth);\r\n\t\t\t\t\t} else if (this.currentIndex <= 0) {\r\n\t\t\t\t\t\tthis.currentIndex = this.slideCount;\r\n\t\t\t\t\t\tthis.setTransform(-this.currentIndex * this.totalWidth);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 2.结束移动后的回调\r\n\t\t\t\t\tthis.$emit('transitionEnd', this.currentIndex - 1);\r\n\t\t\t\t}, this.animDuration)\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 设置滚动的位置\r\n\t\t\t */\r\n\t\t\tsetTransform: function(position) {\r\n\t\t\t\tthis.swiperStyle.transform = `translate3d(${position}px, 0, 0)`;\r\n\t\t\t\tthis.swiperStyle['-webkit-transform'] = `translate3d(${position}px), 0, 0`;\r\n\t\t\t\tthis.swiperStyle['-ms-transform'] = `translate3d(${position}px), 0, 0`;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 操作DOM, 在DOM前后添加Slide\r\n\t\t\t */\r\n\t\t\thandleDom: function() {\r\n\t\t\t\t// 1.获取要操作的元素\r\n\t\t\t\tlet swiperEl = document.querySelector('.swiper');\r\n\t\t\t\tlet slidesEls = swiperEl.getElementsByClassName('slide');\r\n\r\n\t\t\t\t// 2.保存个数\r\n\t\t\t\tthis.slideCount = slidesEls.length;\r\n\r\n\t\t\t\t// 3.如果大于1个, 那么在前后分别添加一个slide\r\n\t\t\t\tif (this.slideCount > 1) {\r\n\t\t\t\t\tlet cloneFirst = slidesEls[0].cloneNode(true);\r\n\t\t\t\t\tlet cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\r\n\t\t\t\t\tswiperEl.insertBefore(cloneLast, slidesEls[0]);\r\n\t\t\t\t\tswiperEl.appendChild(cloneFirst);\r\n\t\t\t\t\tthis.totalWidth = swiperEl.offsetWidth;\r\n\t\t\t\t\tthis.swiperStyle = swiperEl.style;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\r\n\t\t\t\tthis.setTransform(-this.totalWidth);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 拖动事件的处理\r\n\t\t\t */\r\n\t\t\ttouchStart: function(e) {\r\n\t\t\t\t// 1.如果正在滚动, 不可以拖动\r\n\t\t\t\tif (this.scrolling) return;\r\n\r\n\t\t\t\t// 2.停止定时器\r\n\t\t\t\tthis.stopTimer();\r\n\r\n\t\t\t\t// 3.保存开始滚动的位置\r\n\t\t\t\tthis.startX = e.touches[0].pageX;\r\n\t\t\t},\r\n\r\n\t\t\ttouchMove: function(e) {\r\n\t\t\t\t// 1.计算出用户拖动的距离\r\n\t\t\t\tthis.currentX = e.touches[0].pageX;\r\n\t\t\t\tthis.distance = this.currentX - this.startX;\r\n\t\t\t\tlet currentPosition = -this.currentIndex * this.totalWidth;\r\n\t\t\t\tlet moveDistance = this.distance + currentPosition;\r\n\r\n\t\t\t\t// 2.设置当前的位置\r\n\t\t\t\tthis.setTransform(moveDistance);\r\n\t\t\t},\r\n\r\n\t\t\ttouchEnd: function(e) {\r\n\t\t\t\t// 1.获取移动的距离\r\n\t\t\t\tlet currentMove = Math.abs(this.distance);\r\n\r\n\t\t\t\t// 2.判断最终的距离\r\n\t\t\t\tif (this.distance === 0) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t} else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) { // 右边移动超过0.5\r\n\t\t\t\t\tthis.currentIndex--\r\n\t\t\t\t} else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) { // 向左移动超过0.5\r\n\t\t\t\t\tthis.currentIndex++\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 3.移动到正确的位置\r\n\t\t\t\tthis.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n\t\t\t\t// 4.移动完成后重新开启定时器\r\n\t\t\t\tthis.startTimer();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 控制上一个, 下一个\r\n\t\t\t */\r\n\t\t\tprevious: function() {\r\n\t\t\t\tthis.changeItem(-1);\r\n\t\t\t},\r\n\r\n\t\t\tnext: function() {\r\n\t\t\t\tthis.changeItem(1);\r\n\t\t\t},\r\n\r\n\t\t\tchangeItem: function(num) {\r\n\t\t\t\t// 1.移除定时器\r\n\t\t\t\tthis.stopTimer();\r\n\r\n\t\t\t\t// 2.修改index和位置\r\n\t\t\t\tthis.currentIndex += num;\r\n\t\t\t\tthis.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n\t\t\t\t// 3.添加定时器\r\n\t\t\t\tthis.startTimer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t#swiper {\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.swiper {\r\n\t\tdisplay: flex;\r\n\t}\r\n\r\n\t.indicator {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tbottom: 8px;\r\n\t}\r\n\r\n\t.indi-item {\r\n\t\tbox-sizing: border-box;\r\n\t\twidth: 8px;\r\n\t\theight: 8px;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #fff;\r\n\t\tline-height: 8px;\r\n\t\ttext-align: center;\r\n\t\tfont-size: 12px;\r\n\t\tmargin: 0 5px;\r\n\t}\r\n\r\n\t.indi-item.active {\r\n\t\tbackground-color: rgba(212, 62, 46, 1.0);\r\n\t}\r\n</style>\n"],"sourceRoot":"src/components/common/swiper"}]}